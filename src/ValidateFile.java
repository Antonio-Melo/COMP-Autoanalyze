/* ValidateFile.java */
/* Generated By:JavaCC: Do not edit this line. ValidateFile.java */
import java.util.*;

public class ValidateFile implements ValidateFileConstants {

   public static void main(String args[]) throws ParseException{

        ValidateFile validateFile= new ValidateFile(System.in);
        ArrayList<ElementGraph> tokens = new ArrayList<ElementGraph>();
         validateFile.Start(tokens);
    }

  static final public void Start(ArrayList tokens) throws ParseException {Token name;
    jj_consume_token(DIGRAPH);
    name = jj_consume_token(NAME);
System.out.println(name.image);
    //tokens.add(new ElementGraph(name.image));

    jj_consume_token(OPEN);
    NodeGraph(tokens);
  }

/*
digraph G2
{
    a > b [label= hello ];
    a -> c [label="world"];
    c -> d; 
    b -> c; 
    d -> a;
    b [label="this"];
    c [peripheries=2];
}

digraph G3{a -> b [label = hello ];  a -> b [label= hello ];}

digraph G4{a -> b [label = hello ];  a [label= he];}
digraph G5{a [label= he];}

*/
  static final public 
void NodeGraph(ArrayList tokens) throws ParseException {Token name1, field1, charat1, name2, field2, charat2;
field1=null;
         charat1=null;

         name2=null;
         field2=null;
         charat2=null;
    name1 = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPENFIELD:{
      jj_consume_token(OPENFIELD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PERIPHE:{
        field1 = jj_consume_token(PERIPHE);
        jj_consume_token(EQUALS);
        charat1 = jj_consume_token(FINAL_STATE);
        break;
        }
      case LABEL:{
        field1 = jj_consume_token(LABEL);
        jj_consume_token(EQUALS);
        charat1 = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLOSEFIELD);
      break;
      }
    case ARROW:{
      jj_consume_token(ARROW);
      name2 = jj_consume_token(NAME);
      jj_consume_token(OPENFIELD);
      field2 = jj_consume_token(LABEL);
      jj_consume_token(EQUALS);
      charat2 = jj_consume_token(NAME);
      jj_consume_token(CLOSEFIELD);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
if(name2!=null){
                        if(field2!=null){
                         tokens.add(new ElementGraph(name1.image,null, null, name2.image, field2.image, charat2.image));
                        }else
                             tokens.add(new ElementGraph(name1.image,null, null, name2.image, null,null));
                     }
                    else
                         tokens.add(new ElementGraph(name1.image, field1.image, charat1.image, null, null, null));

             System.out.println(name1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLOSE:{
      end();
      break;
      }
    case NAME:{
      NodeGraph(tokens);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void end() throws ParseException {
    jj_consume_token(CLOSE);
    jj_consume_token(LF);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ValidateFileTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x8400,0x2080,};
   }

  /** Constructor with InputStream. */
  public ValidateFile(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ValidateFile(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ValidateFileTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ValidateFile(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ValidateFileTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ValidateFile(ValidateFileTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ValidateFileTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
