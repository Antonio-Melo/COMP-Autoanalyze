options
{
    LOOKAHEAD=1;
}
PARSER_BEGIN(ValidateFile)

package logic.Parser;

import java.util.*;
import logic.Structure.Graph;
import logic.Structure.Node;

public class ValidateFile{
   
   public static void main(String args[]) throws ParseException{


        ValidateFile validateFile= new ValidateFile(System.in);
        Graph graph = new Graph();

       // ArrayList<ElementGraph> tokens = new ArrayList<ElementGraph>();
         validateFile.Start(graph);
    }
}

PARSER_END(ValidateFile)
/*
digraph G1
 {
     start -> test;
     test -> start;
     test -> finish;
 }

*/

SKIP:{
    " "| "\t"| "\r"
}

TOKEN:{
  <DIGRAPH : "digraph">|
  <LABEL :"label">|
  <PERIPHE :"peripheries">|
  <NAME: (["a"-"z","A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])*)>|
  <FINAL_STATE :"2">|
  <INTEGER :["0"-"9"]>|
  <OPENFIELD: "[">|
  <CLOSEFIELD: "]">|
  <OPEN: "{">|
  <CLOSE:"}">|
  <EQUALS:"=">|        
  <ARROW : "->">|
  <SEMICOLON: ";">|
  <LF:"\n">

}
void Start(Graph graph):{Token name;}{
  <DIGRAPH> name=<NAME>{
  graph.setName(name.image);
   // System.out.println(name.image);
   // tokens.add(new ElementGraph(name.image));
  }
  <OPEN>
NodeGraph(graph)

}
/*
digraph G2
{
    a -> b [label= hello ];
    a -> c [label="world"];
    c -> d; 
    b -> c; 
    d -> a;
    b [label="this"];
    c [peripheries=2];
}

digraph G3{a -> b [label = hello ];  a -> b [label= hello ];    a [peripheries=2];}

digraph G4{
a -> b [label = hello ];
 a [label= he];
 }
digraph G5{a [label= he];}

*/

void NodeGraph(Graph graph):{Token name1, field1, charat1, name2, field2, charat2;}{
     {
         field1=null;
         charat1=null;

         name2=null;
         field2=null; 
         charat2=null;
         System.out.println(graph.name);
     }
    name1=<NAME>(   (<OPENFIELD> ((field1=<PERIPHE> <EQUALS> charat1=<FINAL_STATE>)//     c [peripheries=2];
                                   |(field1=<LABEL>   <EQUALS> charat1=<NAME>)    )// a [label= he];
                     <CLOSEFIELD>)


                |(<ARROW>  name2=<NAME>(<OPENFIELD> field2=<LABEL> <EQUALS> charat2=<NAME> <CLOSEFIELD>) ))//-> b [label = hello ]
               < SEMICOLON>//;
         {
         Node nodecopi = new Node(name1.image);
         Node node;
         if( graph.existsNode(nodecopi)){
            node= graph.getNode(name1.image);
         }else{
             node = nodecopi;
             graph.addNode(node);
         }

             if(node==null)
                graph.addNode(node);

                   if(name2!=null){
                    Node dest = new Node(name2.image);
                        if(field2!=null){
                                 node.addEdge(dest,field2.image, charat2.image);
                        }else
                             node.addEdge(dest);
                     }
                    else
                    node.setFieldCharate(field1.image, charat1.image);

             System.out.println(node.getName());
         }
  ( end()| NodeGraph(graph))
}

void end():{}{

    <CLOSE>(<LF>)?

}

/* #### NAO APAGAR  ###################################

DEL Parse*
DEL Node*
DEL *ValidateFile*.java
DEL Simple*
DEL *Token*
DEL *.class


javacc ValidateFile.jj
javac *.java
java ValidateFile


*/

